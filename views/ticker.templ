package views

import (
	"dividendspot/models"
  "dividendspot/views/ticker"
	"fmt"
	"strings"
)

templ TickerPage(tickerData *models.TickerDetails) {
  @Layout(models.HeadTag{
    Title:  fmt.Sprintf("%v (%v) Dividend Yield &amp; Payment History", tickerData.Name, tickerData.Ticker),
    Description: fmt.Sprintf("Explore %v's complete dividend history including payout dates, dividend yield, growth trends, current market price, and the latest news. Stay informed about one of the most consistent dividend stocks in the market.", tickerData.Name),
    CanonicalLink: fmt.Sprintf("https://dividendspot.com/%v", strings.ToLower(tickerData.Ticker)),
    OpengraphImage: fmt.Sprintf("https://dividendspot.com/public/imgs/logos/%v.png", tickerData.Ticker),
    JSONL: tickerData.GenerateJsonL(),
    Styles: []models.Styles{{Link: "/public/css/ticker.css"}},
  }) {

    @ticker.TickerHero(tickerData)

    if len(tickerData.Dividends) > 0 {
      <section class="stats-bar">
        if tickerData.DividendYield != 0.0 {
          <div class="stat-pill big-pill">
            <span class="stat-label">Dividend Yield</span>
            <span class="stat-value">{ tickerData.DividendYield }%</span>
          </div>
          <div class="stat-pill big-pill">
            <span class="stat-label">Payout Frequency</span>
            <span class="stat-value">
              { tickerData.GetTickerDividendFrequencyString() }
            </span>
          </div>
        } else {
          <div class="stat-pill big-pill full-width">
            <span class="stat-label">Payout Frequency</span>
            <span class="stat-value">
              { tickerData.GetTickerDividendFrequencyString() }
            </span>
          </div>
        }
      </section>

      @ticker.DividendHistoryTable(tickerData)
      @ticker.DividendsSummary(tickerData)

    } else {
      <div class="no-dividends-banner">
        <strong>ðŸš« { tickerData.Name } does not pay dividends</strong>
      </div>
    }

    @ticker.TickerNews(tickerData.News)
    @ticker.RelatedTickers(tickerData)
  }
}
